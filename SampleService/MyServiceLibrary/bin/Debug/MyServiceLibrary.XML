<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyServiceLibrary</name>
    </assembly>
    <members>
        <member name="T:MyServiceLibrary.ILogger">
            <summary>
            This interface defines basic methods for logging messages.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.ILogger.WriteInfo(System.String)">
            <summary>
            Designates informational messages that highlight the progress of the application at coarse-grained level.
            </summary>
            <param name="message">Text of message.</param>
        </member>
        <member name="M:MyServiceLibrary.ILogger.WriteDebug(System.String)">
            <summary>
            Designates fine-grained informational events that are most useful to debug an application.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyServiceLibrary.ILogger.WriteWarning(System.String)">
            <summary>
            Designates potentially harmful situations.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyServiceLibrary.ILogger.WriteError(System.String)">
            <summary>
            Designates very severe error events that will presumably lead the application to abort.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MyServiceLibrary.IMaster">
            <summary>
            This interface provides basic user service API.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.IMaster.HostName">
            <summary>
            The name of a host.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.IMaster.Port">
            <summary>
            Number of port.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.IMaster.IpHost">
            <summary>
            Ip host.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.IMaster.IpAddress">
            <summary>
            Ip address.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.IMaster.EndPoint">
            <summary>
            Represents a network endpoint as an IP address and a port number.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.IMaster.SocketListener">
            <summary>
            Socket is for listening incomming messages.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.IMaster.Add(UserLibrary.User)">
            <summary>
            This method ads user to the storage.
            </summary>
            <param name="user">User which must be added.</param>
        </member>
        <member name="M:MyServiceLibrary.IMaster.Delete(UserLibrary.User)">
            <summary>
            This method removes user from the storage.
            </summary>
            <param name="user">A user that must be removed.</param>
        </member>
        <member name="M:MyServiceLibrary.IMaster.Delete(System.Int32)">
            <summary>
            This method removes user from the storage if it exists.
            </summary>
            <param name="userId">Id of the user which must be deleted.</param>
        </member>
        <member name="M:MyServiceLibrary.IMaster.GetUserByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a user by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching a specific user by given criterion.</param>
            <returns>Returns user which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.IMaster.GetUsersByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds an array of users by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching users by given criteria.</param>
            <returns>Returns a collection of users which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.IMaster.StartListen">
            <summary>
            This method made to start listen a port of master or slave.
            </summary>
        </member>
        <member name="T:MyServiceLibrary.IUserStorage">
            <summary>
            This interface prodives basic operations for storage such as CRUD and seeking operations.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.IUserStorage.Count">
            <summary>
            This property returns the number of users in a storage.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.IUserStorage.Add(UserLibrary.User)">
            <summary>
            This method ads the given user to the storage if it doesn't exist.
            </summary>
            <param name="user">A user which must be added to the storage.</param>
        </member>
        <member name="M:MyServiceLibrary.IUserStorage.Delete(UserLibrary.User)">
            <summary>
            This method removes the given user from the storage if it exists.
            </summary>
            <param name="user">A user which must be removed.</param>
        </member>
        <member name="M:MyServiceLibrary.IUserStorage.Delete(System.Int32)">
            <summary>
            This method removes a user from the storage by using user's id.
            </summary>
            <param name="userId">An Id of the user which must be removed.</param>
        </member>
        <member name="M:MyServiceLibrary.IUserStorage.Contains(UserLibrary.User)">
            <summary>
            This method defines if the given user exist into the storage.
            </summary>
            <returns>Returns true if the given user exists.</returns>
        </member>
        <member name="M:MyServiceLibrary.IUserStorage.GetUserByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a user by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching a specific user by given criterion.</param>
            <returns>Returns user which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.IUserStorage.GetUsersByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a collection of users by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching users by given criteria.</param>
            <returns>Returns a collection of users which was found by using the criteria function.</returns>
        </member>
        <member name="T:MyServiceLibrary.IUserStorageService">
            <summary>
            This interface provides an API of CRUD and seeking operations for storage of users.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.IUserStorageService.Add(UserLibrary.User)">
            <summary>
            This method ads users to the storage if this storage doesn't contain the user. 
            </summary>
            <param name="user">User which must be added.</param>
        </member>
        <member name="M:MyServiceLibrary.IUserStorageService.Delete(UserLibrary.User)">
            <summary>
            This method removes user from the storage.
            </summary>
            <param name="user">A user that must be removed.</param>
        </member>
        <member name="M:MyServiceLibrary.IUserStorageService.Delete(System.Int32)">
            <summary>
            This method removes user from the storage if it exists.
            </summary>
            <param name="userId">Id of the user which must be deleted.</param>
        </member>
        <member name="M:MyServiceLibrary.IUserStorageService.GetUserByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a user by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching a specific user by given criterion.</param>
            <returns>Returns user which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.IUserStorageService.GetUsersByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds an array of users by the given predicate.
            </summary>
            <param name="criteria">Represents the method for searching users by given criterion.</param>
            <returns>Returns a collection of users which was found by using the criteria function.</returns>
        </member>
        <member name="T:MyServiceLibrary.Logger">
            <summary>
            This class implements ILogger interface by using NLog.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Logger.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Logger.WriteInfo(System.String)">
            <summary>
            Designates informational messages that highlight the progress of the application at coarse-grained level.
            </summary>
            <param name="message">Text of message.</param>
        </member>
        <member name="M:MyServiceLibrary.Logger.WriteDebug(System.String)">
            <summary>
            Designates fine-grained informational events that are most useful to debug an application.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyServiceLibrary.Logger.WriteWarning(System.String)">
            <summary>
            Designates potentially harmful situations.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyServiceLibrary.Logger.WriteError(System.String)">
            <summary>
            Designates very severe error events that will presumably lead the application to abort.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MyServiceLibrary.Master">
            <summary>
            This class represents the main server that executes CRUD and seeking operations for user storage.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Master.HostName">
            <summary>
            The name of a host.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Master.Port">
            <summary>
            Number of port.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Master.IpHost">
            <summary>
            Ip host.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Master.IpAddress">
            <summary>
            Ip address.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Master.EndPoint">
            <summary>
            Represents a network endpoint as an IP address and a port number.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Master.SocketListener">
            <summary>
            Socket is for listening incomming messages.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Master.#ctor(System.Int32,System.String,System.Int32[])">
            <summary>
            Constructor that takes the port which will be used to start the master.
            </summary>
            <param name="port">Number of port.</param>
            <param name="hostName">Name of a host.</param>
            <param name="portsOfSlaves">Numbers of ports of slaves.</param>
        </member>
        <member name="M:MyServiceLibrary.Master.Add(UserLibrary.User)">
            <summary>
            This method ads user to the storage.
            </summary>
            <param name="user">User which must be added.</param>
        </member>
        <member name="M:MyServiceLibrary.Master.Delete(UserLibrary.User)">
            <summary>
            This method removes user from the storage.
            </summary>
            <param name="user">A user that must be removed.</param>
        </member>
        <member name="M:MyServiceLibrary.Master.Delete(System.Int32)">
            <summary>
            This method removes user from the storage if it exists.
            </summary>
            <param name="userId">Id of the user which must be deleted.</param>
        </member>
        <member name="M:MyServiceLibrary.Master.GetUserByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a user by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching a specific user by given criterion.</param>
            <returns>Returns user which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.Master.GetUsersByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds an array of users by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching users by given criteria.</param>
            <returns>Returns a collection of users which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.Master.StartListen">
            <summary>
            This method starts to listen an incomming messages.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Master.ExecuteCommand(MessageLibrary.NotificationMessage,System.Net.Sockets.Socket)">
            <summary>
            This method executes command which was been received from the notification message.
            </summary>
            <param name="message">The given notification message.</param>
            <param name="handler">Socket for sending a response to a slave.</param>
        </member>
        <member name="M:MyServiceLibrary.Master.SendMessageTo(System.Net.Sockets.Socket,MessageLibrary.NotificationMessage)">
            <summary>
            This method sends a notification message to service that works on the given number of port.
            </summary>
            <param name="handler">The socket which was received from Accept method.</param>
            <param name="message">The message that must be sent.</param>
        </member>
        <member name="T:MyServiceLibrary.Slave">
            <summary>
            This class represent a slave. It'a a master with limited functionality. 
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Slave.HostName">
            <summary>
            The name of a host.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Slave.Port">
            <summary>
            Number of port.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Slave.IpHost">
            <summary>
            Ip host.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Slave.IpAddress">
            <summary>
            Ip address.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Slave.EndPoint">
            <summary>
            Represents a network endpoint as an IP address and a port number.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.Slave.SocketListener">
            <summary>
            Socket is for listening incomming messages.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Slave.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Constructor that takes the port which will be used to start the master.
            </summary>
            <param name="port">Number of port.</param>
            <param name="hostName">Name of a host.</param>
            <param name="masterPort">Number of master port.</param>
        </member>
        <member name="M:MyServiceLibrary.Slave.GetUserByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a user by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching a specific user by given criterion.</param>
            <returns>Returns user which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.Slave.GetUsersByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds an array of users by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching users by given criteria.</param>
            <returns>Returns a collection of users which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.Slave.StartListen">
            <summary>
            This method starts to listen an incomming messages.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.Slave.Add(UserLibrary.User)">
            <summary>
            This method ads user to the storage.
            </summary>
            <param name="user">User which must be added.</param>
        </member>
        <member name="M:MyServiceLibrary.Slave.Delete(System.Int32)">
            <summary>
            This method removes user from the storage if it exists.
            </summary>
            <param name="userId">Id of the user which must be deleted.</param>
        </member>
        <member name="M:MyServiceLibrary.Slave.Delete(UserLibrary.User)">
            <summary>
            This method removes user from the storage.
            </summary>
            <param name="user">A user that must be removed.</param>
        </member>
        <member name="M:MyServiceLibrary.Slave.ExecuteCommand(MessageLibrary.NotificationMessage)">
            <summary>
            This method executes command which was been received from the notification message.
            </summary>
            <param name="message">The given notification message.</param>
        </member>
        <member name="M:MyServiceLibrary.Slave.SendMessageTo(System.Net.Sockets.Socket,MessageLibrary.NotificationMessage)">
            <summary>
            This method sends a notification message to service that works on the given number of port.
            </summary>
            <param name="handler">The socket which was received from Accept method.</param>
            <param name="message">The message that must be sent.</param>
        </member>
        <member name="T:MyServiceLibrary.SlaveService">
            <summary>
            This class represents a slave service that executes only search operation. 
            </summary>
        </member>
        <member name="M:MyServiceLibrary.SlaveService.#ctor(MyServiceLibrary.IUserStorage,MyServiceLibrary.ILogger)">
            <summary>
            This constructor takes an initializes collection of users.
            </summary>
            <param name="storage">A storage for users.</param>
            <param name="users">The collection of users which must be added to the storage for the first time.</param>
            <param name="logger">The instance of class which implements ILogger interface.</param>
        </member>
        <member name="M:MyServiceLibrary.SlaveService.GetUserByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a user by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching a specific user by given criterion.</param>
            <returns>Returns user which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.SlaveService.GetUsersByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds an array of users by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching users by given criteria.</param>
            <returns>Returns a collection of users which was found by using the criteria function.</returns>
        </member>
        <member name="T:MyServiceLibrary.UserStorage">
            <summary>
            This class represents a simple storage for users with basic operations.
            </summary>
        </member>
        <member name="P:MyServiceLibrary.UserStorage.Count">
            <summary>
            This property returns the number of users in a storage.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.UserStorage.#ctor">
            <summary>
            A default constructor that creates an empty storage.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.UserStorage.Add(UserLibrary.User)">
            <summary>
            This method ads users to the storage. 
            </summary>
            <param name="user">User which must be added.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorage.Delete(UserLibrary.User)">
            <summary>
            This method removes user from the storage.
            </summary>
            <param name="user">A user that must be removed.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorage.Delete(System.Int32)">
            <summary>
            This method removes user from the storage by using user's id.
            </summary>
            <param name="userId">Id of the user which must be deleted.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorage.Contains(UserLibrary.User)">
            <summary>
            This method defines if the given user exist into the storage.
            </summary>
            <returns>Returns true if the given user exists.</returns>
        </member>
        <member name="M:MyServiceLibrary.UserStorage.GetUserByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a user by the given criteria. 
            </summary>
            <param name="criteria">Represents the method for searching a specific user by given criterion.</param>
            <returns>Returns the seeking user.</returns>
        </member>
        <member name="M:MyServiceLibrary.UserStorage.GetUsersByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a collection of users by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching users by the given criteria.</param>
            <returns>Returns a collection of users which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.UserStorage.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a storage.
            </summary>
        </member>
        <member name="F:MyServiceLibrary.UserStorage.storage">
            <summary>
            An inner structure for storage.
            </summary>
        </member>
        <member name="T:MyServiceLibrary.IdentifierChanger">
            <summary>
            This delegate encapsulates a method which create an Id of a user.
            </summary>
            <param name="id">An Id of a previous user.</param>
            <returns>Returns id of the current user.</returns>
        </member>
        <member name="T:MyServiceLibrary.UserStorageService">
            <summary>
            This class represents the simple user storage service which prodives basic operations such as addition, finding and removing users.
            </summary>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.#ctor">
            <summary>
            Default constructor; 
            </summary>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.#ctor(MyServiceLibrary.IUserStorage)">
            <summary>
            The constructor that creates a simple service with empty collection of users and basic autoincrement id.
            </summary>
            <param name="storage">A storage for users.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.#ctor(MyServiceLibrary.IUserStorage,MyServiceLibrary.IdentifierChanger)">
            <summary>
            This constructor creates a simple service with empty collection of users and custom identifierChanger.
            </summary>
            <param name="storage">A storage for users.</param>
            <param name="identifierChanger">Delegate which encapsulates method to change user's id.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.#ctor(MyServiceLibrary.IUserStorage,System.Collections.Generic.IEnumerable{UserLibrary.User})">
            <summary>
            This constructor takes an initializes collection of users.
            </summary>
            <param name="storage">A storage for users.</param>
            <param name="users">The collection of users which must be added to the storage for the first time.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.#ctor(MyServiceLibrary.IUserStorage,MyServiceLibrary.ILogger)">
            <summary>
            This constructor takes a storage for users and logger.
            </summary>
            <param name="storage">A storage for users.</param>
            <param name="logger">The class which implements ILogger interfaces.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.#ctor(MyServiceLibrary.IUserStorage,System.Collections.Generic.IEnumerable{UserLibrary.User},MyServiceLibrary.IdentifierChanger,MyServiceLibrary.ILogger)">
            <summary>
            This constructor takes an initializes collection of users and custom identifierChanger.
            </summary>
            <param name="storage">A storage for users.</param>
            <param name="users">The collection of users which must be added to the storage for the first time.</param>
            <param name="identifierChanger">Delegate which encapsulates method to change user's id.</param>
            <param name="logger">The instance of class which implements ILogger interface.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.Add(UserLibrary.User)">
            <summary>
            This method ads users to the storage if this storage doesn't contain the user. 
            </summary>
            <param name="user">User which must be added.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.Delete(UserLibrary.User)">
            <summary>
            This method removes user from the storage.
            </summary>
            <param name="user">A user that must be removed.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.Delete(System.Int32)">
            <summary>
            This method removes user from the storage if it exists.
            </summary>
            <param name="userId">Id of the user which must be deleted.</param>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.GetUserByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds a user by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching a specific user by given criterion.</param>
            <returns>Returns user which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.GetUsersByPredicate(System.Func{UserLibrary.User,System.Boolean})">
            <summary>
            This method finds an array of users by the given criteria.
            </summary>
            <param name="criteria">Represents the method for searching users by given criteria.</param>
            <returns>Returns a collection of users which was found by using the criteria function.</returns>
        </member>
        <member name="M:MyServiceLibrary.UserStorageService.SaveState">
            <summary>
            This method saves a state of the service to xml file. File will contain the last generaed id and the number of users in the storage.
            </summary>
        </member>
    </members>
</doc>
